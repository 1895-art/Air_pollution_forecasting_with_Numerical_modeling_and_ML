x <- matrix(rnorm(200) , 20 , 10)
x <- matrix(rnorm(200) , 20 , 10)
apply(x , 2 , mean)
x <- matrix(rnorm(200), 20, 10)
apply(x, 1, quantile, probs = c(0.25 , 0.75))
x <- matrix(rnorm(200), 6, 3)
apply(x, 1, quantile, probs = c(0.25 , 0.75))
x <- matrix(rnorm(200), 10, 5)
apply(x, 1, quantile, probs = c(0.25 , 0.75))
x <- matrix(rnorm(200), 4, 5)
apply(x, 1, quantile, probs = c(0.25 , 0.75))
x <- matrix(rnorm(90), 3, 6)
apply(x, 1, quantile, probs = c(0.25 , 0.75))
a <- array(rnorm(2 * 2 * 10) , c(2, 2, 10))
apply(a, c(1,2), mean)
rowMeans(a, dims=2)
str(mapply)
noise <- function(n, mean, sd) {
rnorm(n, mean, sd)
}
noise(1:5, 1:5, 2)
mapply(noise, 1:5, 1:5, 2)
str(tapply)
x <- c(rnorm(10), runif(10) , rnorm(10,1))
f <- gl(3,10)
f
[1] 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3 3
Levels: 1 2 3
[1] 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3 3
Levels: 1 2 3
tapply(x, f, mean)
1          2          3
-0.1938747  0.6686096  0.8739286
tapply(x, f, mean, simplify = FALSE)
split(x,f)
lapply(split(x,f), mean)
library(datasets)
head(airquality)
s <- split(airquality, airquality$Month)
s <- split(airquality, airquality$Month)
lapply(s, function(x), colMeans(x[, c(“Ozone”,”Solar.R”,”Wind”)]))
lapply(s, function(x) colMeans(x[, c(“Ozone”,”Solar.R”,”Wind”)]))
lapply(s, function(x), colMeans(x[, c(“Ozone”,”Solar.R”,”Wind”)]))
lapply(s, function(x)colMeans(x[, c(“Ozone”,”Solar.R”,”Wind”)]))
lapply(s, function(x) colMeans(x[, c(“Ozone”,”Solar.R”,”Wind”)]))
lapply(s, function(x) colMeans(x[, c(“Ozone”,”Solar.R”,”Wind”)]))
?lapply(list, function)
?lapply
s <- split(airquality, airquality$Month)
s
lapply(s, function(x)
colMeans(x[, c(“Ozone”,”Solar.R”,”Wind”)]))
sapply(s, function(x) colMeans(x[,c(“Ozone”,”Solar.R”,”Wind”)]))
?colMeans
s <- split(airquality, airquality$Month)
lapply(s, function(x) colMeans(x[,c("Ozone","Solar.R","Wind")]))
sapply(s, function(x) colMeans(x[,c("Ozone","Solar.R","Wind")]))
f1 <- gl(2,5)
f2 <- gl(2,5)
f2 <- gl(5,2)
interaction(f1, f2)
x <- rnorm(10)
str(split(x, list(f1,f2))).
str(split(x, list(f1,f2)))
str(split(x, list(f1,f2), drop=TRUE))
mean(x)
mean(x)
mean(x)
traceback()
1: mean(x)
lm(y~x)
traceback()
debug(lm)
lm(y~x)
options(error = recover)
options(error = recover)
read.csv(“nosuchfile”)
swirl()
swirl()
library(swirl)
install_from_swirl("R Programming")
swirl()
head(flags)
dim(flags)
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
?sapply
sapply(cls_list,class
)
sapply(cls_list,class)
cls_vect <- sapply(flags,class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[,11:17]
head(flag_colors)
lapply(flag_colors,sum)
sapply(flag_colors,sum)
sapply(flag_colors,mean)
flag_shapes <- flags[,19:23]
lapply(flag_shapes,range)
sapply(flag_shapes,range)
shape_mat <- sapply(flag_shapes,range)
shape_mat
class(shape_mat)
unique(c(3,4,5,5,5,6,6))
unique_vals <- lapply(flag[,1:length(flag)],unique)
0
unique_vals <- lapply(flags,unique)
unique_vals
lapply(unique_vals,length)
sapply(unique_vals,length)
1
sapply(flags,unique)
lapply(unique_vals,function(elem) elem[2])
0
swirl()
str(str)
str(lm)
str(ls)
x <- rnorm(100,2,4)
summary(x)
str(x)
f <- gl(40,10)
str(f)
summary(f)
library(datasets)
head(airquality)
str(airquality)
m <- matrix(rnorm(100),10,10)
str(m)
m[,1]
s <- split(airquality, airquality$Month)
str(s)
x <- rnorm(10)
x
x <- rnorm(10,20,2)
x
summary(X)
summary(x)
set.seed(1)
rnorm(5)
rnorm(5)
set.seed(!)
rnorm(5)
set.seed(1)
rnorm(5)
rpois(10,1)
rpois(10m2)
rpois(10,2)
rpois(10,20)
ppois(2,2)
ppois(4,2)
ppois(6,2)
set.seed(20)
x <- rnorm(100)
e <- rnorm(100,0,2)
y <- 0.5 + 2*x + e
summary(y)
plot(x,y)
set.seed(10)
x <- rbinom(100,1,0.5)
e <- rnorm(100,0,2)
y <- 0.5 + 2*x + e
summary(y)
plot(x,y)
set.seed(1)
x <- rnorm(100)
log.mu <- 0.5 + 0.3*x
y <- rpois(100,exp(log.mu))
summary(y)
plot(x,y)
set.seed(1)
sample(1:10,4)
sample(1:10,4)
sample(letters,5)
sample(1:10)   ## permutation
sample(1:10)
sample(1:10, replaces = TRUE)  ## sample w/replacement
sample(1:10, replace = TRUE)  ## sample w/replacement
## Elapsed time > user time
system.time(readLines("http://www.jhsph.edu"))
## Elapsed time < user time
hilbert <- function(n) {}
hilbert <- function(n) {
i <- 1:n
1/outer(i-1,i,"+")
}
x <- hilbert(1000)
system.time(svd(x))
system.time({
n<-1000
r<-numeric(n)
for (i in 1:n) {
x<-rnorm(n)
r[i] <- mean(X)
}
})
system.time({
n<-1000
r<-numeric(n)
for (i in 1:n) {
x<-rnorm(n)
r[i] <- mean(x)
}
})
setseed(1)
set.seed(1)
rpois(5,2)
model <- lm(dist~speed, cars)
model
head(cars)
plot(dist~speed, data = cars)
model <- lm(dist~speed,cars)
model
coef(model[1])
coef(model)[2]
coef(model[1]
)
coef(model)[1]
plot(dist~speed,data = cars)
abline(coef(model))
library(car)
library(car)
library(cars)
library(car)
library()
install.packages("car")
install.packages("car")
library(car)
library(car)
install.packages("car")
library(car)
head(Prestige)
newdata <- Prestige[,c(1:4)]
newdata
head(newdata)
plot(newdata, pch = 16, col = "blue", main = "Matrix Scatterplot")
mod1 <- lm(imcome~education + prestige+ women, data = newdata)
mod1 <- lm(income~education + prestige+ women, data = newdata)
summary(mod1)
head(iris)
mod3 <0 glm(as.integer(Species)~., data = iris)
mod3 <- glm(as.integer(Species)~., data = iris)
summary(mod3)
unknown <- data.frame(rbind(c(5.1,3.5,1.4,0.2)))
names(unknown) <- name(iris)[1:4]
names(unknown) <- names(iris)[1:4]
unknown
mod3
pred <- predict(mod3, unknown)
pred
test <- iris[,1:4]
pred <- predict(mod3, test)
pred
pred <- round(pred, 0)
pred
pred == as.integer(iris[,5])
acc <- mean(pred == as.integer(iris[,5]))
acc
head(iris)
mod3<-glm(as.integer(Species)~.,data = iris, family = "binomial")
plot(wt, mpg, main = "Car Weight-mpg",
xlab = "Car Weight", ylab = "Miles Per Gallon",
col="blue", pch = 16)
library(mtcars)
head(mtcars)
wt <- mtcars$wt
mpg <- mtcars$mpg
plot(wt, mpg, main = "Car Weight-mpg",
xlab = "Car Weight", ylab = "Miles Per Gallon",
col="blue", pch = 16)
var <- c("mpg", "disp", "drat", "wt")
data <- mtcars[,var]
pairs(data, main="Multi plots")
head(iris)
iris.2 <- iris[,3:4]
point <- as.numeric(iris$Species)
color <- c("red","blue","yellow")
plot(iris.2, main = "Iris", pch = c(point), col = color[point])
iris.2 <- iris[,3:4]
point <- as.numeric(iris$Species)
color <- c("red","blue","black")
plot(iris.2, main = "Iris", pch = c(point), col = color[point])
cor(iris[,1:4])
cor(iris$Sepal.Length, iris$Petal.Length)
library(treemap)
install.packages(treemap)
install.packages(Treemap)
install.packages("treemap")
library(treemap)
head(GNI2014)
data(GNI2019)
data(GNI2018)
data(GNI2014)
data(GNI2015)
data(GNI2015)
data(GNI2016)
data(GNI2017)
data(GNI2014)
str(GNI2014)
treemap(GNI2014, index=c("continent","iso3"), vSize="population",
vColor="GNI", type="value", bg.labels="yellow")
head(GNI2014)
str(GNI2014)
str(GNI2014)
head(GNI2014)
treemap(GNI2014, index=c("continent","iso3"), vSize="population",
vColor="GNI", type="value", bg.labels="blue")
?treemap
install.packages("MASS")
library(MASS)
data(UScrime)
str(UScrime)
head(UScrime)
?symbols
r <- sqrt(UScrime$Pop) # Reducing radius
symbols(UScrime$U2, UScrime$y, circles = r, inches = 0.4,
fg = "red", bg = "yellow", lwd = 1.5,
xlab="unemployment 35-39 males", ylab="crime rate",
main="UScrime Data")
text(UScrime$U2, UScrime$y, 1:nrow(UScrime),
cex=0.8, col="black")
# ----iris----
head(iris)
head(Titanic)
Titanic
mosaicplot(Titanic, main = "Survival on the Titanic",
color = c("red","blue"), off=1)
mosaicplot(Titanic, main = "Survival on the Titanic",
color = c("red","blue"), off = 3)
mosaicplot(Titanic, main = "Survival on the Titanic",
color = c("red","blue"), off = 2)
# 1. Simple Regression Analysis
# Explore Dataset
head(cars)
plot(dist~speed, data=cars)
# Simple regression model
model <- lm(dist~speed, cars)
model
# weight $ bias
coef(model)[1] # bias
coef(model)[2] # Weight
# Visualization with Scatter Plot
plot(dist~speed, data=cars)
abline(coef(model))
plot(dist~speed, data=cars)
plot(dist~speed, data=cars)
install.packages(“car”)
library(car)
head(Prestige)
library(car)
head(Prestige)
install.packages("car")
library(car)
head(Prestige)
data <- Prestige[,c(1:4)]
plot(data, pch = 16, col = "red")
model1 <- lm(income ~ education + prestige + women, data = data)
summary(model1)
head(cars)
plot(dist~speed, data=cars)
# Simple regression model
model1 <- lm(dist~speed, cars)
model1
# weight $ bias
coef(model1)[1] # bias
coef(model1)[2] # Weight
# Visualization with Scatterplot
plot(dist~speed, data=cars)
abline(coef(model1))
library(car)
head(Prestige)
# Explore dataset
data <- Prestige[,c(1:4)]
plot(data, pch = 16, col = "red")
# Multiple Regression Model
# Estimate : Coefficients
model2 <- lm(income ~ education + prestige + women, data = data)
summary(model2)
head(iris)
# Logistic Regression Model
model3 <- glm(as.integer(Species) ~., data= iris)
summary(model3)
# Prediction
pred <- 1.18650 + 5.1*(-0.11191)+ 3.5*(-0.04008) + 1.4*0.22865 + 0.2*0.60925
pred
a <- data.frame(rbind(c(5.1, 3.5, 1.4, 0.2)))
names(a) <- names(iris)[1:4]
a
model3
pred <- predict(model3, a)
pred
pred <- predict(model3, a)
pred
ex <- data.frame(rbind(c(5.1, 3.5, 1.4, 0.2)))
names(ex) <- names(iris)[1:4]
pred <- predict(model3, ex)
pred
test <- iris[,1:4]
pred <- predict(model3, test)
pred
pred <- round(pred, 0) # find nearest integer
pred
pred == as.integer(iris[,5])
acc <- mean(pred == as.integer(iris[,5]))
acc
class(iris$Species)
iris$Species
as.integer(iris$Species)
iris$Species
as.integer(iris$Species)
data = read.csv('Hour_01.csv')
getwd()
setwd('C:\Users\eilee\Desktop\Github\Air_pollution_forecasting_with_Numerical_modeling_and_ML')
setwd('C:/Users/eilee/Desktop/Github/Air_pollution_forecasting_with_Numerical_modeling_and_ML')
data = read.csv('air_pollution_new/Hour_01.csv', header = T)
setwd('C:/Users/eilee/Desktop/Github/Air_pollution_forecasting_with_Numerical_modeling_and_ML/air_pollution_new')
setwd('C:/Users/eilee/Desktop/Github/Air_pollution_forecasting_with_Numerical_modeling_and_ML/air_pollution_new')
data = read.csv('Hour_01.csv', header = T)
ls()
rm()
setwd('C:/Users/eilee/Desktop/Github/Air_pollution_forecasting_with_Numerical_modeling_and_ML/air_pollution_new')
data = read.csv('Hour_01.csv', header = T)
